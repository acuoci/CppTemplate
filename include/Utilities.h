/************************************************************************************
 * @file        Utilities.h
 * @brief       Utilities
 * 
 * @author      Alberto Cuoci
 * @email       alberto.cuoci@polimi.it
 * @affiliation CRECK Modeling Lab (http://creckmodeling.chem.polimi.it/)
 *              Department of Chemistry, Materials, and Chemical Engineering
 *              Politecnico di Milano
 *              P.zza Leonardo da Vinci 32, 20133 Milano, Italy
 * @date        YYYY-MM-DD (automatically updated by Git)
 * @copyright   This file is part of the software written by Alberto Cuoci
 *              at CRECK Modeling Lab. All rights reserved.
 * @license     MIT 
 ************************************************************************************/

#ifndef Utilities_H
#define Utilities_H

#include <Eigen/Dense>
#include <iostream>
#include "boost/filesystem.hpp"
#include <boost/filesystem/fstream.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>

/**
 * @brief Write a matrix to a VTK file in ASCII format.
 *
 * This function writes a scalar field in ASCII VTK format. The matrix represents
 * values of the scalar field over a 2D grid.
 *
 * @tparam Matrix Type of the matrix (e.g., Eigen::MatrixXd, Eigen::MatrixXi).
 * @param fileName Path to the output VTK file.
 * @param fieldName Name of the scalar field to be stored.
 * @param v Matrix containing the scalar field values.
 * @param deltax Grid spacing along the x-axis.
 * @param deltay Grid spacing along the y-axis.
 */
template<typename Matrix>
void WriteVTKFileASCII(const boost::filesystem::path fileName, const std::string fieldName, const Matrix& v, const double deltax, const double deltay);

/**
 * @brief Write a vector field to a VTK file in ASCII format.
 *
 * This function writes a 2D vector field in ASCII VTK format. The two matrices represent
 * the x and y components of the vector field over a 2D grid.
 *
 * @tparam Matrix Type of the matrix (e.g., Eigen::MatrixXd, Eigen::MatrixXi).
 * @param fileName Path to the output VTK file.
 * @param fieldName Name of the vector field to be stored.
 * @param vx Matrix containing the x-component of the vector field.
 * @param vy Matrix containing the y-component of the vector field.
 * @param deltax Grid spacing along the x-axis.
 * @param deltay Grid spacing along the y-axis.
 */
template<typename Matrix>
void WriteVTKFileASCII(const boost::filesystem::path fileName, const std::string fieldName, const Matrix& vx, const Matrix& vy, const double deltax, const double deltay);

/**
 * @brief Write a scalar field to a Tecplot file in ASCII format.
 *
 * This function writes a scalar field in ASCII Tecplot format. The matrix represents
 * values of the scalar field over a 2D grid.
 *
 * @tparam Matrix Type of the matrix (e.g., Eigen::MatrixXd, Eigen::MatrixXi).
 * @param fileName Path to the output Tecplot file.
 * @param fieldName Name of the scalar field to be stored.
 * @param v Matrix containing the scalar field values.
 * @param deltax Grid spacing along the x-axis.
 * @param deltay Grid spacing along the y-axis.
 */
template<typename Matrix>
void WriteTecplotFileASCII(const boost::filesystem::path fileName, const std::string fieldName, const Matrix& v, const double deltax, const double deltay);

/**
 * @brief Write a vector field to a Tecplot file in ASCII format.
 *
 * This function writes a 2D vector field in ASCII Tecplot format. The two matrices represent
 * the x and y components of the vector field over a 2D grid.
 *
 * @tparam Matrix Type of the matrix (e.g., Eigen::MatrixXd, Eigen::MatrixXi).
 * @param fileName Path to the output Tecplot file.
 * @param fieldName Name of the vector field to be stored.
 * @param vx Matrix containing the x-component of the vector field.
 * @param vy Matrix containing the y-component of the vector field.
 * @param deltax Grid spacing along the x-axis.
 * @param deltay Grid spacing along the y-axis.
 */
template<typename Matrix>
void WriteTecplotFileASCII(const boost::filesystem::path fileName, const std::string fieldName, const Matrix& vx, const Matrix& vy, const double deltax, const double deltay);

/**
 * @brief Import an XML map into an Eigen matrix.
 *
 * This function reads an XML map (typically generated by a simulator) and imports
 * it into an Eigen matrix. The map is expected to have dimensions (nx, ny) and contain
 * numerical data.
 *
 * @tparam T Data type of the matrix elements (e.g., int, double).
 * @param ptree Property tree containing the XML data.
 * @param name Name of the XML node corresponding to the map.
 * @param M Eigen matrix to store the imported data.
 */
template<typename T>
void ImportXMLMap(boost::property_tree::ptree& ptree, const std::string name, Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>& M);

/**
 * @brief Perform bilinear interpolation on a matrix.
 *
 * This function creates a matrix with double the resolution of the input matrix
 * using bilinear interpolation. It is commonly used to refine a coarse grid.
 *
 * @param matrix Input matrix for interpolation.
 * @return Eigen::MatrixXd The interpolated matrix with higher resolution.
 */
Eigen::MatrixXd BilinearInterpolate(const Eigen::MatrixXd& matrix);

/**
 * @brief Perform nearest-neighbor interpolation on an integer matrix.
 *
 * This function creates a matrix with double the resolution of the input matrix
 * using nearest-neighbor interpolation. It is typically used for land-use maps
 * or other integer-valued data.
 *
 * @param matrix Input matrix for interpolation.
 * @return Eigen::MatrixXi The interpolated matrix with higher resolution.
 */
Eigen::MatrixXi NearestNeighborInterpolate(const Eigen::MatrixXi& matrix);

/**
 * @brief Coarsen a matrix by averaging 2x2 blocks.
 *
 * This function reduces the resolution of a matrix by averaging each 2x2 block of cells.
 * It is useful for creating a coarser representation of a field.
 *
 * @param matrix Input matrix for coarsening.
 * @return Eigen::MatrixXd The coarsened matrix.
 */
Eigen::MatrixXd CoarsenAverage(const Eigen::MatrixXd& matrix);

/**
 * @brief Coarsen an integer matrix using the most frequent value in each 2x2 block.
 *
 * This function reduces the resolution of an integer matrix by taking the most frequent
 * value from each 2x2 block. It is useful for reducing the resolution of land-use maps
 * or other categorical data.
 *
 * @param matrix Input matrix for coarsening.
 * @return Eigen::MatrixXi The coarsened matrix.
 */
Eigen::MatrixXi CoarsenMostFrequent(const Eigen::MatrixXi& matrix);

#endif
